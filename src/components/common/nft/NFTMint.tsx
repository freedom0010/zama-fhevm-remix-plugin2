// src/components/nft/NFTMint.tsx
import React, { useState } from 'react';
import { useNFTContract } from '../../hooks/useNFTContract';
import { useWallet } from '../../hooks/useWallet';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { ErrorMessage } from '../common/ErrorMessage';
import { SuccessMessage } from '../common/SuccessMessage';

interface NFTMintProps {
  contractAddress?: string;
}

export function NFTMint({ contractAddress }: NFTMintProps) {
  const { account, isConnected } = useWallet();
  const { mint, nftInfo, isLoading, error, clearError } = useNFTContract(contractAddress);
  
  const [formData, setFormData] = useState({
    to: '',
    tokenURI: '',
    name: '',
    description: '',
    imageUrl: ''
  });
  const [success, setSuccess] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const errors: Record<string, string> = {};
    
    if (!formData.to.trim()) {
      errors.to = '接收地址不能为空';
    } else if (!formData.to.match(/^0x[a-fA-F0-9]{40}$/)) {
      errors.to = '无效的以太坊地址格式';
    }
    
    if (!formData.name.trim()) {
      errors.name = 'NFT 名称不能为空';
    }
    
    if (!formData.imageUrl.trim()) {
      errors.imageUrl = '图片 URL 不能为空';
    } else {
      try {
        new URL(formData.imageUrl);
      } catch {
        errors.imageUrl = '无效的图片 URL';
      }
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const generateMetadata = () => {
    return JSON.stringify({
      name: formData.name,
      description: formData.description || 'Generated by FHEVM Toolkit',
      image: formData.imageUrl,
      attributes: [
        {
          trait_type: 'Created By',
          value: 'FHEVM Toolkit'
        },
        {
          trait_type: 'Creation Date',
          value: new Date().toISOString()
        }
      ]
    });
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (validationErrors[field]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
    clearError();
    setSuccess(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      // 生成或使用提供的 tokenURI
      const uri = formData.tokenURI.trim() || `data:application/json;base64,${btoa(generateMetadata())}`;
      
      const tokenId = await mint(formData.to, uri);
      if (tokenId !== null) {
        setSuccess(`成功铸造 NFT #${tokenId} 到 ${formData.to.slice(0, 6)}...${formData.to.slice(-4)}`);
        setFormData({
          to: '',
          tokenURI: '',
          name: '',
          description: '',
          imageUrl: ''
        });
        setTimeout(() => setSuccess(null), 5000);
      }
    } catch (err) {
      console.error('Mint error:', err);
    }
  };

  const handleFillCurrentAddress = () => {
    if (account) {
      setFormData(prev => ({ ...prev, to: account }));
    }
  };

  const formatAddress = (addr: string) => {
    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;
  };

  if (!isConnected) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">铸造 NFT</h3>
        <div className="text-center py-8 text-gray-500">
          <div className="text-4xl mb-4">🔌</div>
          <p>请先连接钱包</p>
        </div>
      </div>
    );
  }

  if (!contractAddress) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">铸造 NFT</h3>
        <div className="text-center py-8 text-gray-500">
          <div className="text-4xl mb-4">🏦</div>
          <p>请先选择一个 NFT 合约</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">铸造 NFT</h3>
      
      {nftInfo && (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded">
          <p className="text-sm text-blue-800">
            铸造到合约: {nftInfo.name} ({nftInfo.symbol})
          </p>
          <p className="text-xs text-blue-600 font-mono">
            {formatAddress(nftInfo.address)} • 下个 Token ID: #{nftInfo.currentTokenId}
          </p>
        </div>
      )}

      {error && (
        <div className="mb-4">
          <ErrorMessage error={error} onClose={clearError} />
        </div>
      )}

      {success && (
        <div className="mb-4">
          <SuccessMessage message={success} onClose={() => setSuccess(null)} />
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="to" className="block text-sm font-medium text-gray-700 mb-2">
            接收地址 *
          </label>
          <div className="flex space-x-2">
            <input
              id="to"
              type="text"
              value={formData.to}
              onChange={(e) => handleInputChange('to', e.target.value)}
              placeholder="0x..."
              className={`flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                validationErrors.to 
                  ? 'border-red-300 focus:ring-red-500' 
                  : 'border-gray-300 focus:ring-blue-500'
              }`}
            />
            <button
              type="button"
              onClick={handleFillCurrentAddress}
              className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm"
            >
              使用当前地址
            </button>
          </div>
          {validationErrors.to && (
            <p className="mt-1 text-sm text-red-600">{validationErrors.to}</p>
          )}
        </div>

        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
            NFT 名称 *
          </label>
          <input
            id="name"
            type="text"
            value={formData.name}
            onChange={(e) => handleInputChange('name', e.target.value)}
            placeholder="例如: My Awesome NFT"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              validationErrors.name 
                ? 'border-red-300 focus:ring-red-500' 
                : 'border-gray-300 focus:ring-blue-500'
            }`}
          />
          {validationErrors.name && (
            <p className="mt-1 text-sm text-red-600">{validationErrors.name}</p>
          )}
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
            描述
          </label>
          <textarea
            id="description"
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder="NFT 的描述信息..."
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label htmlFor="imageUrl" className="block text-sm font-medium text-gray-700 mb-2">
            图片 URL *
          </label>
          <input
            id="imageUrl"
            type="url"
            value={formData.imageUrl}
            onChange={(e) => handleInputChange('imageUrl', e.target.value)}
            placeholder="https://example.com/image.png"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              validationErrors.imageUrl 
                ? 'border-red-300 focus:ring-red-500' 
                : 'border-gray-300 focus:ring-blue-500'
            }`}
          />
          {validationErrors.imageUrl && (
            <p className="mt-1 text-sm text-red-600">{validationErrors.imageUrl}</p>
          )}
        </div>

        <div>
          <label htmlFor="tokenURI" className="block text-sm font-medium text-gray-700 mb-2">
            自定义 Token URI（可选）
          </label>
          <input
            id="tokenURI"
            type="text"
            value={formData.tokenURI}
            onChange={(e) => handleInputChange('tokenURI', e.target.value)}
            placeholder="留空将自动生成 JSON 元数据"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <p className="mt-1 text-xs text-gray-500">
            如果不填写，将根据上面的信息自动生成 JSON 元数据
          </p>
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white font-medium py-3 px-4 rounded-lg transition-colors"
        >
          {isLoading ? <LoadingSpinner size="sm" message="铸造中..." /> : '🎨 铸造 NFT'}
        </button>
      </form>

      <div className="mt-4 text-xs text-gray-500 bg-gray-50 p-3 rounded">
        <p>💡 提示：</p>
        <ul className="mt-1 space-y-1 ml-4">
          <li>• NFT 铸造需要支付 Gas 费用</li>
          <li>• 图片建议使用 IPFS 或其他永久存储服务</li>
          <li>• 元数据将包含名称、描述和创建时间等信息</li>
        </ul>
      </div>
    </div>
  );
}